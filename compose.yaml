services:
    php:
        container_name: ${PROJECT_NAME}-php
        image: ${IMAGES_PREFIX:-}app-php
        restart: unless-stopped
        env_file:
            - .env
        build:
            context: .
            target: frankenphp_dev
        networks:
            - substream-network
        depends_on:
            database:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
            MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
            MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
            MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
            MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}/.well-known/mercure}
            MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
        volumes:
            - caddy_data:/data
            - caddy_config:/config
        healthcheck:
            test: ["CMD", "curl", "-f", "https://localhost/status"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        ports:
            - target: 80
              published: ${HTTP_PORT:-80}
              protocol: tcp
            - target: 443
              published: ${HTTPS_PORT:-443}
              protocol: tcp
            - target: 443
              published: ${HTTP3_PORT:-443}
              protocol: udp
            - target: 2019
              published: 2019
              protocol: tcp
            
    database:
        image: postgres:latest
        container_name: ${PROJECT_NAME}-db
        networks:
            - substream-network
        env_file:
            - .env
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
        volumes:
            - database_data:/var/lib/postgresql/data
        ports:
            - "9001:5432"
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    rabbitmq:
        container_name: ${PROJECT_NAME}-rabbitmq
        restart: unless-stopped
        image: rabbitmq:3-management
        hostname: rabbitmq
        networks:
            - substream-network
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_VHOST: ${RABBITMQ_VHOST}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
        ports:
            - "9002:5672"
            - "9003:15672"
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
    
networks:
  substream-network:
    external: true

volumes:
    caddy_data:
    caddy_config:
    database_data:
    rabbitmq_data: