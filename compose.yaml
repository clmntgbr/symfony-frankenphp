services:
  php:
    container_name: ${PROJECT_NAME}-php
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    networks:
      - frankenphp-network
    env_file:
      - .env
      - .env.local
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      DEFAULT_URI: https://${SERVER_NAME:-localhost}:${HTTPS_PORT:-443}
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - name: http
        target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      - name: https
        target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      - name: http3
        target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

  database:
    image: postgres:latest
    container_name: ${PROJECT_NAME}-db
    networks:
      - frankenphp-network
    env_file:
      - .env
      - .env.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - database_data:/var/lib/postgresql/data
    ports:
      - "9001:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mercure:
    container_name: ${PROJECT_NAME}-mercure
    networks:
      - frankenphp-network
    env_file:
      - .env
      - .env.local
    image: dunglas/mercure
    restart: unless-stopped
    ports:
      - "9010:80"
    environment:
      # Uncomment the following line to disable HTTPS,
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: "!ChangeThisMercureHubJWTSecretKey!"
      MERCURE_SUBSCRIBER_JWT_KEY: "!ChangeThisMercureHubJWTSecretKey!"
      # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins http://127.0.0.1:8000 http://localhost:3001
    # Comment the following line to disable the development mode
    command: /usr/bin/caddy run --config /etc/caddy/dev.Caddyfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - mercure_data:/data
      - mercure_config:/config

  rabbitmq:
    container_name: ${PROJECT_NAME}-rabbitmq
    networks:
      - frankenphp-network
    env_file:
      - .env
      - .env.local
    restart: unless-stopped
    image: rabbitmq:3-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
    ports:
      - "9002:5672"
      - "9003:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  caddy_data:
  caddy_config:
  database_data:
  mercure_data:
  mercure_config:
  rabbitmq_data:

networks:
  frankenphp-network:
    external: true